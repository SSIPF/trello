import os
os.environ["XDG_SESSION_TYPE"] = "xcb"

import pygame
from djitellopy import Tello
from datetime import datetime
import cv2
import numpy as np
import time

# Rychlosti
S = 60
FPS = 120

# Slo≈æky skupin
os.makedirs("../ml_sk3/group1", exist_ok=True)
os.makedirs("../ml_sk3/group2", exist_ok=True)

class DroneUI:
    def __init__(self):
        pygame.init()
        pygame.display.set_caption("Tello Camera Stream")
        self.screen = pygame.display.set_mode([960, 720])
        pygame.time.set_timer(pygame.USEREVENT + 1, 1000 // FPS)

        self.tello = Tello()
        self.tello.connect()
        print(f"Battery Life: {self.tello.get_battery()}%")

        self.tello.set_speed(10)
        self.tello.streamoff()
        self.tello.streamon()

        self.frame_read = self.tello.get_frame_read()

        self.for_back_velocity = 0
        self.left_right_velocity = 0
        self.up_down_velocity = 0
        self.yaw_velocity = 0

        self.send_rc_control = False

    def run(self):
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.USEREVENT + 1:
                    self.update()
                elif event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        running = False
                    self.keydown(event.key)
                elif event.type == pygame.KEYUP:
                    self.keyup(event.key)

            if self.frame_read.stopped:
                break

            frame = self.frame_read.frame
            text = f"Battery: {self.tello.get_battery()}%"
            cv2.putText(frame, text, (5, 710), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
            frame = cv2.resize(frame, (960, 720))
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = np.rot90(frame)
            frame = np.flipud(frame)
            surface = pygame.surfarray.make_surface(frame)

            self.screen.blit(surface, (0, 0))
            pygame.display.update()
            time.sleep(1 / FPS)

        self.tello.end()
        pygame.quit()

    def keydown(self, key):
        if key == pygame.K_w:
            self.for_back_velocity = S
        elif key == pygame.K_s:
            self.for_back_velocity = -S
        elif key == pygame.K_a:
            self.left_right_velocity = -S
        elif key == pygame.K_d:
            self.left_right_velocity = S
        elif key == pygame.K_UP:
            self.up_down_velocity = S
        elif key == pygame.K_DOWN:
            self.up_down_velocity = -S
        elif key == pygame.K_LEFT:
            self.yaw_velocity = -S
        elif key == pygame.K_RIGHT:
            self.yaw_velocity = S
        elif key == pygame.K_o:
            filename = f"group1/{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            cv2.imwrite(filename, self.frame_read.frame)
            print(f"Saved to {filename}")
        elif key == pygame.K_p:
            filename = f"group2/{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            cv2.imwrite(filename, self.frame_read.frame)
            print(f"Saved to {filename}")

    def keyup(self, key):
        if key in [pygame.K_w, pygame.K_s]:
            self.for_back_velocity = 0
        elif key in [pygame.K_a, pygame.K_d]:
            self.left_right_velocity = 0
        elif key in [pygame.K_UP, pygame.K_DOWN]:
            self.up_down_velocity = 0
        elif key in [pygame.K_LEFT, pygame.K_RIGHT]:
            self.yaw_velocity = 0
        elif key == pygame.K_t:
            self.tello.takeoff()
            self.send_rc_control = True
        elif key == pygame.K_l:
            self.tello.land()
            self.send_rc_control = False

    def update(self):
        if self.send_rc_control:
            self.tello.send_rc_control(
                self.left_right_velocity,
                self.for_back_velocity,
                self.up_down_velocity,
                self.yaw_velocity
            )

ui = DroneUI()
ui.run()
